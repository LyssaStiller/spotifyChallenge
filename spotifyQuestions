// Question 1 -- sortByStrings(s,t): Sort the letters in the string s by the order they occur in the string t. You can assume t will not have repetitive characters. For s = "weather" and t = "therapyw", the output should be sortByString(s, t) = "theeraw". For s = "good" and t = "odg", the output should be sortByString(s, t) = "oodg".



const sortByStrings = function (s, t) {

  let index = 0
  let finalStr = ''
  while(index <= s.length){
    for(var i = 0; i < s.length; i++){
      if(t.indexOf(s[i]) === index){
        finalStr += s[i]
      }
    }
  index++
  }
  return finalStr
}

//sortByStrings('weather', 'therapyw')

// Question 2 -- decodeString(s): Given an encoded string, return its corresponding decoded string.

// The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is repeated exactly k times. Note: k is guaranteed to be a positive integer.


// For s = "4[ab]", the output should be decodeString(s) = "abababab"
// For s = "2[b3[a]]", the output should be decodeString(s) = "baaabaaa"

const decodeString = function(str) {
  let finalStr = ""
  let refStr = "abcdefghijklmnopqrstuvwxyz"


    for(var i = str.length-1; i >=0; i--){
      if(!i){
        return finalStr
      }
      if (str[i] === "]"){
        return decodeString(str.slice(0, i))
      }
      if(str[i] === "[") {
        let subStr = str.slice(i+1)
        let count = Number(str[i-1])
        let j = 0
        while(j < count){
          finalStr = subStr + finalStr
          console.log(finalStr)
          j++
        }

      }

    }

  }



decodeString("2[b3[a]]")

decodeString("2[b3[a]]")
//decodeString('4[ab]')



// Question 3 -- changePossibilities(amount,amount): Your quirky boss collects rare, old coins. They found out you're a programmer and asked you to solve something they've been wondering for a long time.

// Write a function that, given an amount of money and an array of coin denominations, computes the number of ways to make the amount of money with coins of the available denominations.

// Example: for amount=4 (4¢) and denominations=[1,2,3] (1¢, 2¢ and 3¢), your program would output 4—the number of ways to make 4¢ with those denominations:

// 1¢, 1¢, 1¢, 1¢
// 1¢, 1¢, 2¢
// 1¢, 3¢
// 2¢, 2¢

const changePossibilities = function(amount, denoms) {
  let count = 0
  let decrementer = 0
  for(let i = 0; i < denoms.length; i++){
    if(!(amount%(denoms[i]))){
      count++
      let decrementer = denoms[i]
      denoms.splice(i, 1)
        while (amount > 0){
          amount -= decrementer
          for(let j = 0; j < denoms.length; j++){
            console.log(amount, denoms[j])
           if(amount > denoms[j] && !(amount%(denoms[j]))){
            count++
           }
        }
      }
    }
  }

  return count
}

// changePossibilities(4, [1,2,3])
//changePossibilities(10, [2,5,3,6])
